Desafio de Projetos Docker
Microsserviços Definição
São um tipo inovador de arquitetura de software, que consiste em construir aplicações desmembrando-as em serviços independentes. Estes serviços se comunicam entre si usando APIs e promovem grande agilidade em times de desenvolvimento.
Hoje gigantes do mercado como Netflix e Spotify, divulgam a receita do sucesso ao transformar suas aplicações monolíticas em mais de 500 microsserviços.
Quando quebramos uma aplicação monolítica em várias partes, conseguimos escalá-las de forma separada. Supondo que um serviço de autenticação seja chamado várias vezes durante a sessão de um usuário, com certeza o stress sobre ele é maior.
Com microsserviços, podemos escalar apenas uma parte, ao invés de ter que escalar a aplicação como um todo, como ocorre em uma arquitetura monolítica.
Os microsserviços não necessariamente precisam ser escritos usando a mesma linguagem de programação.

--------------------------------------------------------------

O que é um Cluster e um Docker Swarm

Um cluster consiste em computadores ligados que trabalham em conjunto, de modo que, em muitos aspectos, podem ser considerados como um único sistema. Computadores em cluster executam a mesma tarefa, controlado e programado por software.
Cada computador presente em cluster é conhecido como nó.
O Swarm pe um recurso do Docker que fornece funcionalidades de orquestração de container, incluindo clustering nativo de hosts do Docker e agendamento de cargas de trabalho de containers. Um grupo de hosts do Docker formam um cluster "Swarm".

--------------------------------------------------------------

Criando um container MYSQL

cd /var/lib/docker/volumes
ls
cd data
ls
cd _data
ls
cd..
cd..
ls
cd app
ls
cd data
ls
nano index.php
inserir código php
ls
Docker run --name web-server -dt -p 80:80 --mount type=volume,src=app,dst=/app/ webdevops/php-apache:alpine-php7
docker ps
consultar ip do site na VM

--------------------------------------------------------------

Estressando o Container

acessar loader.io
target host
criar dentro do container o arquivo gerado
nano (token gerado).txt
Após isso criar um novo teste

--------------------------------------------------------------

Iniciando um Cluster Swarm
docker ps
docker rm --force web-server
docker ps
docker swarm init
Docker swarm join --token (colocar token) (colocar ip)
repetir o processo para todas máquinas do swarm

--------------------------------------------------------------

Criando um serviço no Cluster

docker node ls
docker service create --name web-server --replicas 10-dt -p 80:80 --mount type=volume, src=app, dst=/app/ webdevops/php-apache:alpine-php7
docker service ps web-server
(Replica carga, mas não replica o conteudo)

--------------------------------------------------------------

Replicando um volume dentro do Cluster

apt-get install nfs-server
--------------------------------------------------------------
No outro servidor fazer o comando:
apt-get install nfs-common
--------------------------------------------------------------
nano /etc/exports
/var/lib/docker/volumes/app/_data *(rw,sync,subtree_check)
exportfs -ar
showmount -e
--------------------------------------------------------------
no outro servidor
mount -o v3 172.31.0.127:/var/lib/docker/volumes/app/_data /var/lib/docker/volumes/app/_data

--------------------------------------------------------------

Criando um proxy utilizando o NGINX
mkdir /proxy
cd /proxy
ls
nano ngynx.conf
http {
	upstream all {
		server 172.31.0.127:80;
		server 172.31.0.189:80;
		server 172.31.0.240:80;
	}
	server {
		listen 4500;
		location / {
			proxy pass htpp://all/;
		}
	}
}
events {}

ls
nano dockefile
FROM nginx
COPY nginx.conf /etc/nginx/nginx.conf
ls
docker build -t proxy-app .
docker image ls
docker container run --name my-proxy-app -dti -p 4500:4500 proxy-app
docker container ls
--------------------------------------------------------------

Estressando o Cluster

acessar o loader
criar new host e por o ip correto com a porta 4500
na primeira maquina
cd /var/lib/docker/volumes/
ls
cd app
ls
cd _data
ls
nano token-loader.txt
colar o que foi gerado no loader
verify no site
realizar o teste de estresse